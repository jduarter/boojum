#
# Copyright (c) 2022, Rafael Santiago
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
include ../build/toolsets.hsl

local var sources type list;
local var includes type list;
local var cflags type list;
local var libraries type list;
local var ldflags type list;
local var curr_toolset type string;
local var target type string;

project boojum-sample : toolset $curr_toolset : $sources, $includes, $cflags,
                                                    $libraries, $ldflags, $target;

boojum-sample.preloading() {
    $curr_toolset = get_app_toolset();
}

boojum-sample.prologue() {
    $sources.ls(".*\\.c$");
    $includes = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    var option type list;
    $option = hefesto.sys.get_option("boojum-with-c11");
    var use_c11_threading type int;
    $use_c11_threading = ($option.count() > 0);
    if ($use_c11_threading) {
        $cflags.add_item("-DBOOJUM_WITH_C11=1");
    }
    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");
    $target = "boojum-sample";
    if (hefesto.sys.os_name() == "windows") {
        $target = $target + ".exe";
    }
    if ($curr_toolset.match("^msvc-c-") > 0) {
        $ldflags.add_item("libboojum" + get_msvc_lib_suffix() + ".lib");
        $ldflags.add_item("libkryptos" + get_msvc_lib_suffix() + ".lib");
        $ldflags.add_item("bcrypt.lib");
    } else {
        $ldflags.add_item("-lboojum");
        $ldflags.add_item("-lkryptos");
        if (hefesto.sys.os_name() != "windows") {
            $ldflags.add_item("-lpthread");
        } else {
            $ldflags.add_item("-lbcrypt");
        }
    }
}

boojum-sample.epilogue() {
    if (hefesto.sys.last_forge_result() != 0) {
        hefesto.sys.echo("~~~ Unable to build sample.\n");
    }
}

project boojum-cc-sample : toolset $curr_toolset : $sources, $includes, $cflags,
                                                      $libraries, $ldflags, $target;


boojum-cc-sample.preloading() {
    $curr_toolset = get_cc_app_toolset();
}

boojum-cc-sample.prologue() {
    $sources.clear();
    $includes.clear();
    $cflags.clear();
    $ldflags.clear();
    $sources.ls(".*\\.cc$");
    $includes = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    var option type list;
    $option = hefesto.sys.get_option("boojum-with-c11");
    var use_c11_threading type int;
    $use_c11_threading = ($option.count() > 0);
    if ($use_c11_threading) {
        $cflags.add_item("-DBOOJUM_WITH_C11=1");
    }
    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");
    $target = "boojum-cc-sample";
    if (hefesto.sys.os_name() == "windows") {
        $target = $target + ".exe";
    }
    if ($curr_toolset.match("^msvc-cc-") > 0) {
        $ldflags.add_item("libboojum" + get_msvc_lib_suffix() + ".lib");
        $ldflags.add_item("libkryptos" + get_msvc_lib_suffix() + ".lib");
        $ldflags.add_item("bcrypt.lib");
    } else {
        $cflags.add_item("-std=c++17");
        $ldflags.add_item("-lboojum");
        $ldflags.add_item("-lkryptos");
        if (hefesto.sys.os_name() != "windows") {
            $ldflags.add_item("-lpthread");
        } else {
            $ldflags.add_item("-lbcrypt");
        }
    }
}

boojum-cc-sample.epilogue() {
    if (hefesto.sys.last_forge_result() != 0) {
        hefesto.sys.echo("~~~ Unable to build sample.\n");
    }
}
