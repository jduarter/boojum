#
# Copyright (c) 2022, Rafael Santiago
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/clang/clang-lib.hsl
include ~/toolsets/clang/clang-app.hsl
include on windows ~/toolsets/msvc/msvc.hsl
include ~/fsutil.hsl
include ~/conv.hsl

function get_lib_toolset() : result type string {
    result get_current_toolset() + "-c-lib";
}

function get_app_toolset() : result type string {
    result get_current_toolset() + "-c-app";
}

function get_cc_app_toolset() : result type string {
    result get_current_toolset() + "-cc-app";
}

function get_current_toolset() : result type string {
    var option type list;
    $option = hefesto.sys.get_option("toolset");
    if ($option.count() > 0) {
        result $option.item(0);
    }
    if (has_gcc()) {
        result "gcc";
    }
    if (has_clang()) {
        result "clang";
    }
    result "";
}

function release_build() : result type none {
    var option type list;
    $option = hefesto.sys.get_option("release-build");
    if ($option.count() > 0) {
        hefesto.project.abort(build("release"));
    }
}

function installer() : result type none {
    var install type list;
    $install = hefesto.sys.get_option("install");
    if ($install.count() > 0) {
        hefesto.project.abort(build("install"));
    }

    var uninstall type list;
    $uninstall = hefesto.sys.get_option("uninstall");
    if ($uninstall.count() > 0) {
        hefesto.project.abort(build("uninstall"));
    }
}

function build(libname type string) : result type int {
    var func type int;
    $func = hefesto.sys.get_func_addr("build_" + $libname);
    if ($func != 0) {
        result hefesto.sys.call_func_addr($func);
    }
    hefesto.sys.echo("ERROR: Unknown library to build: " + $libname + "\n");
    result 1;
}

local function get_next_version() : result type string {
    var lines type list;
    $lines = hefesto.sys.lines_from_file("boojum.h", "#define BOOJUM_VERSION 0x.*");
    if ($lines.count() == 0) {
        hefesto.sys.echo("SANITY CHECK FAILURE: No version found.\n");
    }
    var year type string;
    $year = $lines.item(0);
    $year.replace("#define BOOJUM_VERSION 0x", "");
    $year = $year.at(0) + $year.at(1) + $year.at(2) + $year.at(3);
    var curr_year type string;
    $curr_year = hefesto.sys.time("%Y");
    if ($curr_year == $year) {
        result ("vx" + $curr_year + get_next_relno());
    }
    result ("vx" + $year + "0000");
}

local function get_next_relno() : result type string {
    var lines type list;
    var relno type string;
    $relno = 0;
    $lines = hefesto.sys.lines_from_file("boojum.h", "#define BOOJUM_VERSION 0x.*");
    if ($lines.count() > 0) {
        var curr type string;
        $curr = $lines.item(0);
        $curr.replace("#define BOOJUM_VERSION 0x[0123456789][0123456789][0123456789][0123456789]", "");
        $curr.replace(" //.*$", "");
        var r type int;
        $r = str2int($curr);
        $r = $r + 1;
        if ($r < 10) {
            $relno = "000" + $r;
        } else if ($r < 100) {
            $relno = "00" + $r;
        } else if ($r < 1000) {
            $relno = "0" + $r;
        } else if ($r < 10000) {
            $relno = $r;
        } else {
            hefesto.sys.echo("SANITY CHECK FAILURE: Well, it seems you have not been really much competent to release nothing. " +
                             "Please stop releasing bugs.\n");
            hefesto.project.abort(1);
        }
    }
    result $relno;
}

local function build_release() : result type none {
    var option type list;
    $option = hefesto.sys.get_option("release-build");
    if ($option.count() == 0) {
        hefesto.sys.echo("ERROR: Release version tag not informed or it is not really a release build.\n");
        result 1;
    }
    var version_tag type string;
    $version_tag = $option.item(0);

    if ($version_tag == "1") {
        $version_tag = get_next_version();
    }

    var version_pattern type string;
    $version_pattern = "^vx[0123456789][0123456789][0123456789][0123456789]" +
                       "[0123456789][0123456789][0123456789][0123456789]$";
    if ($version_tag.match($version_pattern) == 0) {
        hefesto.sys.echo("ERROR: Invalid release version.\n");
        result 1;
    }

    $option = hefesto.sys.lines_from_file("../RELNOTES.txt", "git-tag: '" + $version_tag + "'");
    if ($option.count() > 0) {
        hefesto.sys.echo("ERROR: This provided version was already used.\n");
        result 1;
    }

    var opt type string;

    $opt = prompt("Do you want to create a release for " + $version_tag + "?", newlist("y,n"));
    if ($opt == "n") {
        hefesto.sys.echo("INFO: Release build process cancelled.\n");
        result 1;
    }
    if (add_relnotes($version_tag) != 0) {
        hefesto.sys.echo("INFO: Release build process cancelled.\n");
        result 1;
    }
    if (update_version($version_tag) != 0) {
        hefesto.sys.echo("INFO: Release build process cancelled.\n");
        result 1;
    }
    update_manpages_version($version_tag);
    hefesto.sys.echo("INFO: Release build staged. If you really want to release it, commit and push your changes.\n" +
                     "      E.g.: git commit -am \"Update RELNOTES.txt for " + $version_tag + "\"\n" +
                     "            git push origin main\n" +
                     "            git tag " + $version_tag + "\n" +
                     "            git push origin main --tags\n");
    result 0;
}

local function update_version(version_tag type string) : result type int {
    var xtag type string;
    $xtag = $version_tag;
    $xtag.replace("^vx", "0x");
    $xtag = "#define BOOJUM_VERSION " + $xtag;
    hefesto.sys.replace_in_file("boojum.h", "#define BOOJUM_VERSION " +
                                "0x[0123456789][0123456789][0123456789][0123456789]" +
                                "[0123456789][0123456789][0123456789][0123456789]", $xtag);
    result 0;
}

local function update_manpages_version(version_tag type string) : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("../etc/man/man3") != 1) {
        hefesto.sys.echo("ERROR: Unable to find etc/man/man3 sub-directory.\n");
        hefesto.project.abort(1);
    }

    var new_version type string;
    $new_version = $version_tag;
    $new_version.replace("vx", "0x");

    $new_version = " 3 \"" + get_curr_date_for_manpages() + "\" \"version " + $new_version + "\"";

    var manpages type list;
    $manpages.ls(".*\\.3");
    var m type int;
    while ($m < $manpages.count()) {
        var manpage_path type string;
        $manpage_path = $manpages.item($m);
        hefesto.sys.replace_in_file($manpage_path, " 3 \".*\".*\"version 0x[0123456789]" +
                                                                          "[0123456789]" +
                                                                          "[0123456789]" +
                                                                          "[0123456789]" +
                                                                          "[0123456789]" +
                                                                          "[0123456789]" +
                                                                          "[0123456789]" +
                                                                          "[0123456789]\"", $new_version);
        $m = $m + 1;
    }

    hefesto.sys.cd($oldcwd);
}

local function get_curr_date_for_manpages() : result type string {
    var en_months type list;
    $en_months.add_item("January");
    $en_months.add_item("February");
    $en_months.add_item("March");
    $en_months.add_item("April");
    $en_months.add_item("May");
    $en_months.add_item("June");
    $en_months.add_item("July");
    $en_months.add_item("August");
    $en_months.add_item("September");
    $en_months.add_item("October");
    $en_months.add_item("November");
    $en_months.add_item("December");
    var m type string;
    $m = hefesto.sys.time("%m");
    result $en_months.item(str2int($m)) + hefesto.sys.time(" %d") + "," + hefesto.sys.time(" %Y");
}

local function add_relnotes(version_tag type string) : result type int {
    var curr_relnotes type list;
    var new_relnotes type list;
    $curr_relnotes = hefesto.sys.lines_from_file("../RELNOTES.txt", ".*");
    var r type int;
    $r = 0;
    while ($r < 7) {
        $new_relnotes.add_item($curr_relnotes.item($r));
        $r = $r + 1;
    }

    var release_overview type string;
    $release_overview = hefesto.sys.prompt("Release overview: ");

    if ($release_overview.len() == 0) {
        hefesto.sys.echo("\nSANITY CHECK FAILURE: If you cannot summarize what you are releasing, please, " +
                         "do not release. Bye!\n");
        result 1;
    }

    var features type list;
    if (prompt(">>> Is there some new features?", newlist("y,n")) == "y") {
        $features = get_notes();
    }

    var bugfixes type list;
    if (prompt(">>> Is there some bugfixes?", newlist("y,n")) == "y") {
        $bugfixes = get_notes();
    }

    if ($features.count() == 0 && $bugfixes.count() == 0) {
        hefesto.sys.echo("\nSANITY CHECK FAILURE: With no features and no bugfixes, there is nothing to release. Bye!\n");
        result 1;
    }

    $new_relnotes.add_item($version_tag + " [git-tag: '" + $version_tag + "']");
    $new_relnotes.add_item("");

    $new_relnotes.add_item("    " + $release_overview);
    $new_relnotes.add_item("");

    $new_relnotes.add_item("    Features:");
    $new_relnotes.add_item("");

    if ($features.count() == 0) {
        $new_relnotes.add_item("        - None.");
    } else {
        var n type int;
        while ($n < $features.count()) {
            $new_relnotes.add_item("        - " + $features.item($n));
            $n = $n + 1;
        }
    }

    $new_relnotes.add_item("");

    $new_relnotes.add_item("    Bugfixes:");
    $new_relnotes.add_item("");

    if ($bugfixes.count() == 0) {
        $new_relnotes.add_item("        - None.");
    } else {
        $n = 0;
        while ($n < $bugfixes.count()) {
            $new_relnotes.add_item("        - " + $bugfixes.item($n));
            $n = $n + 1;
        }
    }

    $new_relnotes.add_item("");

    $r = 7;
    while ($r < $curr_relnotes.count()) {
        $new_relnotes.add_item($curr_relnotes.item($r));
        $r = $r + 1;
    }

    if (prompt("Do you want to confirm those notes?", newlist("y,n")) == "n") {
        result 1;
    }

    var fp type file;
    $fp = hefesto.sys.fopen("../RELNOTES.txt", "wb");

    $r = 0;
    while ($r < $new_relnotes.count()) {
        var buf type string;
        if ($new_relnotes.item($r) != "\n") {
            $buf = $new_relnotes.item($r) + "\n";
        } else {
            $buf = "\n";
        }
        hefesto.sys.fwrite($buf, $buf.len(), $fp);
        $r = $r + 1;
    }

    hefesto.sys.fclose($fp);

    result 0;
}

local function get_notes() : result type list {
    var notes type list;
    hefesto.sys.echo("tip: okay, when you done just type '.' and hit return to go back.\n");
    var curr_note type string;
    $curr_note = hefesto.sys.prompt("_ ");
    while ($curr_note != ".") {
        $notes.add_item($curr_note);
        $curr_note = hefesto.sys.prompt("_ ");
    }
    result $notes;
}

local function prompt(message type string, options type list) : result type string {
    var msg_w_opts type string;
    $msg_w_opts = $message + " [";
    var o type int;
    $o = 0;
    while ($o < $options.count()) {
        $msg_w_opts = $msg_w_opts + $options.item($o);
        if ($o + 1 < $options.count()) {
            $msg_w_opts = $msg_w_opts + "/";
        } else {
            $msg_w_opts = $msg_w_opts + "] ";
        }
        $o = $o + 1;
    }
    var option type string;
    $option = hefesto.sys.prompt($msg_w_opts);
    while ($options.index_of($option) == -1) {
        $option = hefesto.sys.prompt($msg_w_opts);
    }
    result $option;
}

local function newlist(data type string) : result type list {
    var retval type list;
    var d type int;
    $d = 0;
    while ($d < $data.len()) {
        var new_item type string;
        if ($data.at($d) == ",") {
            $retval.add_item($new_item);
            $new_item = "";
        } else {
            $new_item = $new_item + $data.at($d);
        }
        $d = $d + 1;
    }
    $retval.add_item($new_item);
    result $retval;
}

local function build_samples() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("samples") != 1) {
        hefesto.sys.echo("ERROR: Unable to find sample directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + get_current_toolset();

    var boojum_with_c11 type list;
    $boojum_with_c11 = hefesto.sys.get_option("boojum-with-c11");
    if ($boojum_with_c11.count() > 0) {
        $cmdline = $cmdline + " --boojum-with-c11";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;
}

local function build_libkryptos() : result type int {
    var curr_toolset type string;
    $curr_toolset = get_current_toolset();

    var libpath type string;

    if ($curr_toolset != "msvc") {
        $libpath = "libs/kryptos/lib/libkryptos.a";
    } else {
        $libpath = "libs/kryptos/lib/libkryptos" + get_msvc_lib_suffix() + ".lib";
    }

    if (isfile($libpath) == 1) {
        result 0;
    }

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("libs/kryptos/src") != 1) {
        hefesto.sys.echo("ERROR: Unable to find libkryptos directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + $curr_toolset + " --no-totp-sync-tests --no-hotp-sync-tests --no-tests";

    var dbg type list;
    $dbg = hefesto.sys.get_option("compile-model");
    if ($dbg.count() > 0 && $dbg.item(0) == "debug") {
        $cmdline = $cmdline + " --compile-model=debug";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;
}

local function build_libcutest() : result type int {
    var curr_toolset type string;
    $curr_toolset = get_current_toolset();

    var libpath type string;

    if ($curr_toolset != "msvc") {
        $libpath = "libs/cutest/src/lib/libcutest.a";
    } else {
        $libpath = "libs/cutest/src/lib/libcutest" + get_msvc_lib_suffix() + ".lib";
    }

    if (isfile($libpath) == 1) {
        result 0;
    }

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("libs/cutest/src") != 1) {
        hefesto.sys.echo("ERROR: Unable to find libcutest directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + get_lib_toolset();

    var dbg type list;
    $dbg = hefesto.sys.get_option("compile-model");
    if ($dbg.count() > 0 && $dbg.item(0) == "debug") {
        $cmdline = $cmdline + " --compile-model=debug";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;
}

local function build_test() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("test") != 1) {
        hefesto.sys.echo("ERROR: Unable to find test directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + get_current_toolset();

    var dbg type list;
    $dbg = hefesto.sys.get_option("compile-model");
    if ($dbg.count() > 0 && $dbg.item(0) == "debug") {
        $cmdline = $cmdline + " --compile-model=debug";
    }

    var boojum_with_c11 type list;
    $boojum_with_c11 = hefesto.sys.get_option("boojum-with-c11");
    if ($boojum_with_c11.count() > 0) {
        $cmdline = $cmdline + " --boojum-with-c11";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;
}

local function build_boojum_poker() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    var dir type string;
    $dir = hefesto.sys.make_path("test", "boojum_poker");

    if (hefesto.sys.cd($dir) != 1) {
        hefesto.sys.echo("ERROR: Unable to find test/boojum_poker directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + get_current_toolset();

    var dbg type list;
    $dbg = hefesto.sys.get_option("compile-model");
    if ($dbg.count() > 0 && $dbg.item(0) == "debug") {
        $cmdline = $cmdline + " --compile-model=debug";
    }

    var boojum_with_c11 type list;
    $boojum_with_c11 = hefesto.sys.get_option("boojum-with-c11");
    if ($boojum_with_c11.count() > 0) {
        $cmdline = $cmdline + " --boojum-with-c11";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;

}

local function build_install() : result type int {
    var prefix type string;
    var target_path type string;
    var boojum_home type list;
    $boojum_home = hefesto.sys.get_option("boojum-home");
    if ($boojum_home.count() > 0) {
        $prefix = $boojum_home.item(0);
    } else if (hefesto.sys.os_name() == "windows") {
        $prefix = "c:\\boojum\\";
    } else {
        $prefix = "/usr/local";
    }

    $target_path = hefesto.sys.make_path($prefix, hefesto.sys.make_path("include", "boojum"));

    if (mktree($target_path) == 0) {
        hefesto.sys.echo("ERROR: Unable to create destination path `" + $target_path + "`.\n");
        hefesto.project.abort(1);
    }

    var headers type list;
    $headers.add_item("boojum.h");

    if ($headers.count() == 0) {
        hefesto.sys.echo("ERROR: Unable to find Boojum's headers.\n");
        build("uninstall"); # INFO(Rafael): Rolling up the previous mess.
        hefesto.project.abort(1);
    }

    hefesto.sys.echo("INFO: Installing Boojum's C headers to `" + $target_path + "`...\n");

    var h type int;
    $h = 0;
    while ($h < $headers.count()) {
        var dest_path type string;
        $dest_path = $headers.item($h);
        $dest_path = pathfromfilepath($dest_path);
        mktree($dest_path);
        var filename type string;
        $filename = $headers.item($h);
        $filename = filenamefrompath($filename);
        var dest type string;
        $dest = hefesto.sys.make_path($target_path, $filename);
        if (hefesto.sys.cp($headers.item($h), $dest) != 1) {
            hefesto.sys.echo("ERROR: Unable to copy `" + $dest + "`.\n");
            build("uninstall");
            hefesto.project.abort(1);
        }
        $h = $h + 1;
    }

    hefesto.sys.echo("INFO: Done.\n\n");

    $target_path = hefesto.sys.make_path($prefix, "lib");

    if (mktree($target_path) == 0) {
        hefesto.sys.echo("ERROR: Unable to create destination path `" + $target_path + "`.\n");
        build("uninstall");
        hefesto.project.abort(1);
    }

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("../lib") == 0) {
        hefesto.sys.echo("ERROR: Unable to find out Boojum's binaries.\n");
        build("uninstall");
        hefesto.project.abort(1);
    }

    var libs type list;
    if (hefesto.sys.os_name() == "windows") {
        $libs.ls(".*\\.(a|lib)$");
    } else {
        $libs.ls(".*\\.a$");
    }

    hefesto.sys.cd($oldcwd);

    hefesto.sys.echo("INFO: Now installing Boojum's binaries...\n");

    var l type int;
    $l = 0;
    while ($l < $libs.count()) {
        var libname type string;
        $libname = $libs.item($l);
        $libname = filenamefrompath($libname);
        $dest = hefesto.sys.make_path($target_path, $libname);
        if (hefesto.sys.cp($libs.item($l), $dest) != 1) {
            hefesto.sys.echo("ERROR: Unable to copy `" + $dest + "`.\n");
            build("uninstall");
            hefesto.project.abort(1);
        }
        $l = $l + 1;
    }

    hefesto.sys.echo("INFO: Done.\n");

    if (hefesto.sys.os_name() == "linux"
        || hefesto.sys.os_name() == "freebsd") {
        if (mktree("/usr/local/man/man3") == 0) {
            hefesto.sys.echo("ERROR: Unable to create destination directory `/usr/local/man/man3`.\n");
            build("uninstall");
            hefesto.project.abort(1);
        }
        if (hefesto.sys.cd("../etc/man/man3") == 0) {
            hefesto.sys.echo("ERROR: Unable to find out Boojum's API man pages.\n");
            build("uninstall");
            hefesto.project.abort(1);
        }
        var manpages type list;
        $manpages.ls(".*\\.3$");

        hefesto.sys.echo("\nINFO: Now installing Boojum's API man pages...\n");

        var m type int;
        $m = 0;
        while ($m < $manpages.count()) {
            var manpage type string;
            $manpage = $manpages.item($m);
            $manpage = filenamefrompath($manpage);
            $dest = hefesto.sys.make_path("/usr/local/man/man3", $manpage);
            if (hefesto.sys.cp($manpages.item($m), $dest) != 1) {
                hefesto.sys.echo("ERROR: Unable to copy `" + $dest + "`.\n");
                build("uninstall");
                hefesto.project.abort(1);
            }
            $m = $m + 1;
        }

        hefesto.sys.cd($oldcwd);

        hefesto.sys.echo("INFO: Done.\n");
    }

    result 0;
}

local function build_uninstall() : result type int {
    var prefix type string;
    var target_path type string;
    var boojum_home type list;
    $boojum_home = hefesto.sys.get_option("boojum-home");
    if ($boojum_home.count() > 0) {
        $prefix = $boojum_home.item(0);
    } else if (hefesto.sys.os_name() == "windows") {
        $prefix = "c:\\boojum\\";
    } else {
        $prefix = "/usr/local";
    }

    $target_path = hefesto.sys.make_path($prefix, hefesto.sys.make_path("include", "boojum"));

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd($target_path) == 0) {
        hefesto.sys.echo("ERROR: Unable to access path `" + $target_path + "`.\n");
        result 1;
    }

    hefesto.sys.echo("INFO: Uninstalling everything related to Boojum that I can find...\n");

    var headers type list;
    $headers.ls(".*\\.h$");
    var h type int;
    $h = 0;
    while ($h < $headers.count()) {
        var dest type string;
        $dest = $headers.item($h);
        if (hefesto.sys.rm($dest) == 1) {
            hefesto.sys.echo("WARN: Unable to remove `" + $target_path + "`. Try to do it manually.\n");
        }
        $h = $h + 1;
    }

    hefesto.sys.cd($oldcwd);

    $target_path = hefesto.sys.make_path($prefix, hefesto.sys.make_path("include", "boojum"));
    hefesto.sys.rmdir($target_path);

    $target_path = hefesto.sys.make_path($prefix, "include");
    hefesto.sys.rmdir($target_path);

    $target_path = hefesto.sys.make_path($prefix, "lib");

    var to_burn type list;

    if (hefesto.sys.os_name() != "windows") {
        $to_burn.add_item("libboojum.a");
    } else {
        $to_burn.add_item("libboojum.a");
        $to_burn.add_item("libboojummt.lib");
        $to_burn.add_item("libboojummtd.lib");
    }

    var t type int;
    $t = 0;
    while ($t < $to_burn.count()) {
        $dest = hefesto.sys.make_path($target_path, $to_burn.item($t));
        if (isfile($dest)) {
            hefesto.sys.rm($dest);
        }
        $t = $t + 1;
    }

    if (hefesto.sys.os_name() == "linux"
        || hefesto.sys.os_name() == "freebsd") {
        var manpage_dir type string;
        $manpage_dir = hefesto.sys.make_path($oldcwd, "../etc/man/man3");
        if (hefesto.sys.cd($manpage_dir) == 0) {
            hefesto.sys.echo("ERROR: Unable to find out Boojum's API man pages.\n");
            hefesto.project.abort(1);
        }
        var manpages type list;
        $manpages.ls(".*\\.3$");

        var m type int;
        $m = 0;
        while ($m < $manpages.count()) {
            var manpage type string;
            $manpage = $manpages.item($m);
            $manpage = filenamefrompath($manpage);
            $dest = hefesto.sys.make_path("/usr/local/man/man3", $manpage);
            hefesto.sys.rm($dest);
            $m = $m + 1;
        }

        hefesto.sys.cd($oldcwd);
    }

    hefesto.sys.rmdir($target_path);

    hefesto.sys.rmdir($prefix);

    hefesto.sys.echo("INFO: Done.\n");

    result 0;
}

local function has_gcc() : result type int {
    result (runbk("gcc --version") == 0);
}

local function has_clang() : result type int {
    result (runbk("clang --version") == 0);
}

local function runbk(cmd type string) : result type int {
    if (hefesto.sys.os_name() != "windows") {
        result hefesto.sys.run($cmd + ">/dev/null 2>&1");
    }
    result hefesto.sys.run($cmd + ">nul 2>&1");
}

function has_valgrind() : result type int {
    result (runbk("valgrind --version") == 0);
}

function get_memleak_total_by_valgrind(filepath type string) : result type int {
    var leak_total type int;
    var lines type list;
    $leak_total = 0;
    $lines = hefesto.sys.lines_from_file($filepath, "^==.*==.*definitely lost: ");
    if ($lines.count() > 0) {
        var line type string;
        $line = $lines.item(0);
        $line.replace("^==.*==.*definitely lost: ", "");
        $line.replace(" bytes.*$", "");
        $line.replace(",", "");
        $leak_total = str2int($line);
    } else {
        hefesto.sys.echo("PANIC: Unable to get valgrind's leak check total.\n");
        hefesto.project.abort(1);
    }
    result $leak_total;
}

function get_msvc_lib_suffix() : result type string {
    var config type string;
    $config = msvc_get_cfg();
    if ($config == "release") {
        result "mt";
    }
    result "mtd";
}

local function msvc_get_cfg() : result type string {
    var option type list;
    $option = hefesto.sys.get_option("compile-model");
    if ($option.count() == 0) {
        result "release";
    }

    var config type string;
    $config = $option.item(0);

    if ($config.match("^([dD][eE][bB][uU][gG]|[rR][eE][lL][eE][aA][sS][eE])$") == 0) {
        hefesto.sys.echo("ERROR: --compile-model must be 'debug' or 'release'.\n");
        $config = "";
    }

    result $config;
}
