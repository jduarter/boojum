include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/clang/clang-lib.hsl
include ~/toolsets/clang/clang-app.hsl
include on windows ~/toolsets/msvc/msvc.hsl
include ~/fsutil.hsl
include ~/conv.hsl

function get_lib_toolset() : result type string {
    result get_current_toolset() + "-c-lib";
}

function get_app_toolset() : result type string {
    result get_current_toolset() + "-c-app";
}

function get_current_toolset() : result type string {
    var option type list;
    $option = hefesto.sys.get_option("toolset");
    if ($option.count() > 0) {
        result $option.item(0);
    }
    if (has_gcc()) {
        result "gcc";
    }
    if (has_clang()) {
        result "clang";
    }
    result "";
}

function build(libname type string) : result type int {
    var func type int;
    $func = hefesto.sys.get_func_addr("build_" + $libname);
    if ($func != 0) {
        result hefesto.sys.call_func_addr($func);
    }
    hefesto.sys.echo("ERROR: Unknown library to build: " + $libname + "\n");
    result 1;
}

local function build_libkryptos() : result type int {
    var curr_toolset type string;
    $curr_toolset = get_current_toolset();

    var libpath type string;

    if ($curr_toolset != "msvc") {
        $libpath = "libs/kryptos/lib/libkryptos.a";
    } else {
        $libpath = "libs/kryptos/lib/libkryptos" + get_msvc_lib_suffix() + ".lib";
    }

    if (isfile($libpath) == 1) {
        result 0;
    }

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("libs/kryptos/src") != 1) {
        hefesto.sys.echo("ERROR: Unable to find libkryptos directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + $curr_toolset;

    var dbg type list;
    $dbg = hefesto.sys.get_option("compile-model");
    if ($dbg.count() > 0 && $dbg.item(0) == "debug") {
        $cmdline = $cmdline + " --compile-model=debug";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;
}

local function build_libcutest() : result type int {
    var curr_toolset type string;
    $curr_toolset = get_current_toolset();

    var libpath type string;

    if ($curr_toolset != "msvc") {
        $libpath = "libs/cutest/src/lib/libcutest.a";
    } else {
        $libpath = "libs/cutest/src/lib/libcutest" + get_msvc_lib_suffix() + ".lib";
    }

    if (isfile($libpath) == 1) {
        result 0;
    }

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("libs/cutest/src") != 1) {
        hefesto.sys.echo("ERROR: Unable to find libcutest directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + get_lib_toolset();

    var dbg type list;
    $dbg = hefesto.sys.get_option("compile-model");
    if ($dbg.count() > 0 && $dbg.item(0) == "debug") {
        $cmdline = $cmdline + " --compile-model=debug";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;
}

local function build_test() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("test") != 1) {
        hefesto.sys.echo("ERROR: Unable to find test directory.\n");
        result 1;
    }

    var cmdline type string;
    $cmdline = "hefesto --toolset=" + get_current_toolset();

    var dbg type list;
    $dbg = hefesto.sys.get_option("compile-model");
    if ($dbg.count() > 0 && $dbg.item(0) == "debug") {
        $cmdline = $cmdline + " --compile-model=debug";
    }

    var boojum_with_c11 type list;
    $boojum_with_c11 = hefesto.sys.get_option("boojum-with-c11");
    if ($boojum_with_c11.count() > 0) {
        $cmdline = $cmdline + " --boojum-with-c11";
    }

    var err type int;
    $err = hefesto.sys.run($cmdline);

    hefesto.sys.cd($oldcwd);

    result $err;
}

local function has_gcc() : result type int {
    result (runbk("gcc --version") == 0);
}

local function has_clang() : result type int {
    result (runbk("clang --version") == 0);
}

local function runbk(cmd type string) : result type int {
    if (hefesto.sys.os_name() != "windows") {
        result hefesto.sys.run($cmd + ">/dev/null 2>&1");
    }
    result hefesto.sys.run($cmd + ">nul 2>&1");
}

function has_valgrind() : result type int {
    result (runbk("valgrind --version") == 0);
}

function get_memleak_total_by_valgrind(filepath type string) : result type int {
    var leak_total type int;
    var lines type list;
    $leak_total = 0;
    $lines = hefesto.sys.lines_from_file($filepath, "^==.*==.*definitely lost: ");
    if ($lines.count() > 0) {
        var line type string;
        $line = $lines.item(0);
        $line.replace("^==.*==.*definitely lost: ", "");
        $line.replace(" bytes.*$", "");
        $line.replace(",", "");
        $leak_total = str2int($line);
    } else {
        hefesto.sys.echo("PANIC: Unable to get valgrind's leak check total.\n");
        hefesto.project.abort(1);
    }
    result $leak_total;
}

function get_msvc_lib_suffix() : result type string {
    var config type string;
    $config = msvc_get_cfg();
    if ($config == "release") {
        result "mt";
    }
    result "mtd";
}

local function msvc_get_cfg() : result type string {
    var option type list;
    $option = hefesto.sys.get_option("compile-model");
    if ($option.count() == 0) {
        result "release";
    }

    var config type string;
    $config = $option.item(0);

    if ($config.match("^([dD][eE][bB][uU][gG]|[rR][eE][lL][eE][aA][sS][eE])$") == 0) {
        hefesto.sys.echo("ERROR: --compile-model must be 'debug' or 'release'.\n");
        $config = "";
    }

    result $config;
}
