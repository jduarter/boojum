#
# Copyright (c) 2022, Rafael Santiago
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
include ../build/toolsets.hsl

local var sources type list;
local var includes type list;
local var cflags type list;
local var libraries type list;
local var ldflags type list;
local var target type string;
local var curr_toolset type string;

boojum-tests.preloading() {
    $curr_toolset = get_app_toolset();
}

project boojum-tests : toolset $curr_toolset : $sources, $includes, $cflags, $libraries, $ldflags, $target;

boojum-tests.prologue() {
    build_deps();

    $includes = hefesto.sys.get_option("includes");
    $libraries = hefesto.sys.get_option("libraries");

    var option type list;
    $option = hefesto.sys.get_option("boojum-with-c11");

    var use_c11_threading type int;
    $use_c11_threading = ($option.count() > 0);

    if ($use_c11_threading) {
        $cflags.add_item("-DBOOJUM_WITH_C11=1");
    }

    $sources.ls(".*\\.c$");
    if ($curr_toolset.match("^clang-") > 0 ||
        $curr_toolset.match("^gcc-") > 0) {
        $ldflags.add_item("-lcutest");
        $ldflags.add_item("-lboojum");
        $ldflags.add_item("-lkryptos");
    } else if ($curr_toolset.match("^msvc-") > 0) {
        $ldflags.add_item("libkryptos" + get_msvc_lib_suffix() + ".lib");
        $ldflags.add_item("libcutest" + get_msvc_lib_suffix() + ".lib");
        $ldflags.add_item("libboojum" + get_msvc_lib_suffix() + ".lib");
    }

    var os type string;
    $os = hefesto.sys.os_name();

    if ($os == "freebsd" || $os == "netbsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if ($os == "linux") {
        $ldflags.add_item("-lpthread");
        $ldflags.add_item("-ldl");
    }

    $target = "boojum-tests";

    if ($os == "windows") {
        if ($curr_toolset.match("^msvc-") == 0) {
            $ldflags.add_item("-lbcrypt");
        } else {
            $ldflags.add_item("bcrypt.lib");
        }
        $target = $target + ".exe";
    }
}

boojum-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        if (runtests() == 0) {
            hefesto.sys.echo("*** Build success.\n");
        } else {
            hefesto.sys.echo("~~~ Build failure due to broken test(s) or profiling error(s).\n");
        }
    } else {
        hefesto.sys.echo("~~~ Build failure.\n");
    }
}

local function runtests() : result type int {
    var err type int;
    if (has_valgrind()) {
        $err = hefesto.sys.run("valgrind --tool=memcheck --leak-check=yes " +
                               "--log-file=memcheck-log.txt --show-reachable=no " + hefesto.sys.make_path("bin", $target));
        var leak_total type int;
        $leak_total = get_memleak_total_by_valgrind("memcheck-log.txt");
        if ($leak_total > 0) {
            hefesto.sys.echo("WARNING: valgrind has found some memory leaks, " + $leak_total + " byte(s) leaking.\n");
            $err = 1;
        }
    } else {
        $err = hefesto.sys.run(hefesto.sys.make_path("bin", $target) + " --cutest-leak-check=yes");
    }
    result $err;
}

local function build_deps() : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    hefesto.sys.cd("..");
    if (build("libkryptos") != 0 ||
        build("libcutest") != 0) {
        hefesto.project.abort(1);
    }
    hefesto.sys.cd($oldcwd);
}
